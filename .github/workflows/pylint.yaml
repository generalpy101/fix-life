name: Pylint Workflow on Windows

on:
  issue_comment:
    types: [created]
  push:
    branches:
      - main

jobs:
  lint-diff:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/lint')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.0'

      - name: Install pylint
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Get changed files in PR
        id: changed-files
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $prNumber = $env:GITHUB_EVENT_ISSUE_NUMBER
          Write-Output "Fetching changed files for PR #$prNumber"
          $files = gh pr diff $prNumber --name-only
          Write-Output $files
          # Output as multiline for GitHub step output
          echo "changed_files<<EOF" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          $files | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "EOF" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Run pylint on changed python files
        id: pylint-diff
        shell: pwsh
        run: |
          $files = '${{ steps.changed-files.outputs.changed_files }}' -split "`n" | Where-Object { $_ -match '\.py$' }
          if ($files.Count -eq 0) {
            Write-Output "No Python files changed, skipping pylint."
            echo "pylint_score=10.0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            exit 0
          }
          Write-Output "Running pylint on changed files:"
          $files | ForEach-Object { Write-Output $_ }
          $filesString = $files -join ' '
          $pylint_output = pylint $filesString --rcfile=.pylintrc --score=y 2>&1
          Write-Output $pylint_output
          $score_line = $pylint_output | Select-String -Pattern 'Your code has been rated at'
          if ($score_line) {
            $score = ($score_line -split ' ')[6] -replace '/10:', ''
          } else {
            Write-Output "Failed to parse pylint score, setting to 0"
            $score = 0
          }
          Write-Output "Pylint score on changed files: $score"
          Add-Content -Path $Env:GITHUB_OUTPUT -Value "pylint_score=$score"
          if ([double]$score -lt 9.5) {
            exit 1
          }

      - name: Comment PR with pylint result
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Pylint score on changed files: **${{ steps.pylint-diff.outputs.pylint_score }}**
            
            Threshold to pass: 9.5

  lint-full:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.0'

      - name: Install pylint
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Run pylint on full codebase
        id: pylint-full
        shell: pwsh
        run: |
          $files = git ls-files '*.py' -z | ForEach-Object { $_.Trim() }
          if (-not $files) {
            Write-Output "No Python files found"
            echo "pylint_score=10.0" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
            exit 0
          }
          $filesString = $files -join ' '
          Write-Output "Running pylint on files: $filesString"
          $pylint_output = pylint $filesString --rcfile=.pylintrc --score=y 2>&1
          Write-Output $pylint_output
          $score_line = $pylint_output | Select-String -Pattern 'Your code has been rated at'
          if ($score_line) {
            $score = ($score_line -split ' ')[6] -replace '/10:', ''
          } else {
            Write-Output "Failed to parse pylint score, setting to 0"
            $score = 0
          }
          Write-Output "Full pylint score: $score"
          Add-Content -Path $Env:GITHUB_OUTPUT -Value "pylint_score=$score"
          if ([double]$score -ge 9.7) {
            exit 0
          } else {
            exit 1
          }

      - name: Final status
        shell: pwsh
        run: echo "Pylint full score check passed with score ${{ steps.pylint-full.outputs.pylint_score }}"
