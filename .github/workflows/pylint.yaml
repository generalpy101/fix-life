name: Pylint Workflow on Ubuntu

on:
  issue_comment:
    types: [created, edited, deleted]
  push:
    branches:
      - main

jobs:
  lint-diff:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/lint')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies and pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -r requirements.txt || echo "Skipping install errors (e.g., Windows-only deps)"

      - name: Comment on PR - Lint started
        run: |
          gh pr comment ${{ github.event.issue.number }} --body "üïµÔ∏è **Pylint check started** on changed files..."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changed Python files
        id: changed-files
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          FILES=$(gh pr diff "$PR_NUMBER" --name-only | grep '\.py$' || true)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run pylint on changed files
        id: pylint-diff
        run: |
          FILES="${{ steps.changed-files.outputs.changed_files }}"
          if [ -z "$FILES" ]; then
            echo "No Python files changed."
            echo "pylint_score=10.0" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Running pylint on:"
          echo "$FILES"

          OUTPUT=$(pylint $FILES --rcfile=.pylintrc --disable=import-error --score=y 2>&1 || true)
          echo "$OUTPUT"
          SCORE_LINE=$(echo "$OUTPUT" | grep "Your code has been rated at")
          if [ -n "$SCORE_LINE" ]; then
            SCORE=$(echo "$SCORE_LINE" | awk '{print $7}' | cut -d'/' -f1)
          else
            echo "Failed to parse pylint score."
            SCORE=0
          fi
          echo "Pylint score: $SCORE"
          echo "pylint_score=$SCORE" >> $GITHUB_OUTPUT

          if (( $(echo "$SCORE < 9.5" | bc -l) )); then
            echo "$OUTPUT" > pylint_output.txt
            exit 1
          fi

      - name: Comment on PR - Lint failed
        if: failure()
        run: |
          SCORE="${{ steps.pylint-diff.outputs.pylint_score }}"
          gh pr comment ${{ github.event.issue.number }} --body "‚ùå **Pylint failed** with score **$SCORE / 10.0**\n\n_Threshold to pass: 9.5_"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint-full:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies and pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -r requirements.txt || echo "Skipping install errors (e.g., Windows-only deps)"

      - name: Run pylint on full codebase
        id: pylint-full
        run: |
          FILES=$(git ls-files '*.py')
          if [ -z "$FILES" ]; then
            echo "No Python files found."
            echo "pylint_score=10.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          OUTPUT=$(pylint $FILES --rcfile=.pylintrc --disable=import-error --score=y 2>&1 || true)
          echo "$OUTPUT"
          SCORE_LINE=$(echo "$OUTPUT" | grep "Your code has been rated at")
          if [ -n "$SCORE_LINE" ]; then
            SCORE=$(echo "$SCORE_LINE" | awk '{print $7}' | cut -d'/' -f1)
          else
            echo "Failed to parse pylint score."
            SCORE=0
          fi
          echo "Full Pylint score: $SCORE"
          echo "pylint_score=$SCORE" >> $GITHUB_OUTPUT
          if (( $(echo "$SCORE < 9.7" | bc -l) )); then
            exit 1
          fi

      - name: Final status
        run: echo "‚úÖ Full codebase Pylint check passed with score ${{ steps.pylint-full.outputs.pylint_score }}"
